
# https://www.playframework.com/documentation/latest/Configuration
play.filters.enabled += "play.filters.csrf.CSRFFilter"

play.mailer {
host = server2.sensin.eu
port = 587
tls = true
user = "onl_app_test_mail@sensin.eu"
password = "MQ_*Lb@Kq6cX"
}


database_timeout = "15"    // in seconds.


# Database configuration
slick.dbs.default.profile="slick.jdbc.PostgresProfile$"
slick.dbs.default.db = {
  profile = "slick.jdbc.PostgresProfile$"
  dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
  properties = {
    driver = "org.postgresql.Driver"
    #url  = "jdbc:postgresql://localhost:5432/stm_zulassung"
    url  = "jdbc:postgresql://localhost:5432/postgres"
    #url  = "jdbc:postgresql://http://127.0.0.1:50172/browser/stm_zulassung"
    user = "postgres"
    password = "victory"
  }
}

#slick.dbs.default = {
#    profile = "slick.jdbc.PostgresProfile$"
#    db {
#        dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
#        host="localhost"
#        port="5432"
#        databaseName = "stm_zulassung"
#        driver = "org.postgresql.Driver"
#        user = "postgres"
#        password = ""
#        url = "jdbc:postgres://localhost:5432/stm_zulassung"
#    }
#}

#slick.dbs.stm_zulassung = {
#    dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
#    properties {
#        driver ="org.postgresql.Driver"
#        profile = "slick.jdbc.PostgresProfile$"
#        url = "postgres://localhost:5432/stm_zulassung"
#        user = "postgres"
#        password = ""
#    }
# }
#{
#  connectionPool = "HikariCP" //use HikariCP for our connection pool
#  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource" //Simple datasource with no connection pooling. The connection pool has already been specified with HikariCP.
#  properties = {
#    serverName = "localhost"
#    portNumber = "5432"
#    databaseName = "stm_zulassung"
#    user = "sstm"
#    password = "sstmtest"
#  }
#  numThreads = 10
#}

#slick.dbs.spv = {
#  connectionPool = "HikariCP" //use HikariCP for our connection pool
#  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource" //Simple datasource with no connection pooling. The connection pool has already been specified with HikariCP.
#  properties = {
#    serverName = "localhost"
#    portNumber = "5432"
#    databaseName = "spv"
#    user = "sstm"
#    password = "sstmtest"
#  }
#  numThreads = 10
#}


#slick.dbs.dbv2_spv = {
#  driver = "com.mysql.cj.jdbc.Driver",
#  url = "jdbc:mysql://127.0.0.1:3306/spv?serverTimezone=UTC",
#  user = "sstm",
#  password = "sqldatabase1.",
#  connectionPool = disabled
#}
#slick.dbs.dbv2_stm_zulassung = {
#  driver = "com.mysql.cj.jdbc.Driver",
#  url = "jdbc:mysql://127.0.0.1:3306/stm_zulassung?serverTimezone=UTC",
#  user = "sstm",
#  password = "sqldatabase1.",
#  connectionPool = disabled
#}


play {

  server {

    # The root directory for the Play server instance. This value can
    # be set by providing a path as the first argument to the Play server
    # launcher script. See `ServerConfig.loadConfiguration`.
    dir = ${?user.dir}

    # HTTP configuration
    http {
      # The HTTP port of the server. Use a value of "disabled" if the server
      # shouldn't bind an HTTP port.
      port = 9000
      #port = ${?PLAY_HTTP_PORT}
      #port = ${?http.port}

      # The interface address to bind to.
      address = "0.0.0.0"
      #address = ${?PLAY_HTTP_ADDRESS}
      #address = ${?http.address}

      # The idle timeout for an open connection after which it will be closed
      # Set to null or "infinite" to disable the timeout, but notice that this
      # is not encouraged since timeout are important mechanisms to protect your
      # servers from malicious attacks or programming mistakes.
      idleTimeout = 75 seconds
    }

    # HTTPS configuration
    https {

      # The HTTPS port of the server.
      port = 9443
      #port = ${?PLAY_HTTPS_PORT}
      #port = ${?https.port}

      # The interface address to bind to
      address = "0.0.0.0"
      address = ${?PLAY_HTTPS_ADDRESS}
      address = ${?https.address}

      # The idle timeout for an open connection after which it will be closed
      # Set to null or "infinite" to disable the timeout, but notice that this
      # is not encouraged since timeout are important mechanisms to protect your
      # servers from malicious attacks or programming mistakes.
      idleTimeout = ${play.server.http.idleTimeout}

      # The SSL engine provider
      engineProvider = "play.core.server.ssl.DefaultSSLEngineProvider"
      engineProvider = ${?play.http.sslengineprovider}

      # HTTPS keystore configuration, used by the default SSL engine provider
      keyStore {
        # The path to the keystore
        path = ${?https.keyStore}

        # The type of the keystore
        type = "JKS"
        type = ${?https.keyStoreType}

        # The password for the keystore
        password = ""
        password = ${?https.keyStorePassword}

        # The algorithm to use. If not set, uses the platform default algorithm.
        algorithm = ${?https.keyStoreAlgorithm}
      }

      # HTTPS truststore configuration
      trustStore {

        # If true, does not do CA verification on client side certificates
        noCaVerification = false
      }

      # Whether JSSE want client auth mode should be used. This means, the server
      # will request a client certificate, but won't fail if one isn't provided.
      wantClientAuth = false

      # Whether JSSE need client auth mode should be used. This means, the server
      # will request a client certificate, and will fail and terminate the session
      # if one isn't provided.
      needClientAuth = false
    }

    # The path to the process id file created by the server when it runs.
    # If set to "/dev/null" then no pid file will be created.
    pidfile.path = ${play.server.dir}/RUNNING_PID
    pidfile.path = ${?pidfile.path}

    websocket {
      # Maximum allowable frame payload length. Setting this value to your application's
      # requirement may reduce denial of service attacks using long data frames.
      frame.maxLength = 64k
      frame.maxLength = ${?websocket.frame.maxLength}
    }

    debug {
      # If set to true this will attach an attribute to each request containing debug information. If the application
      # fails to load (e.g. due to a compile issue in dev mode), then this configuration value is ignored and the debug
      # information is always attached.
      #
      # Note: This configuration option is not part of Play's public API and is subject to change without the usual
      # deprecation cycle.
      addDebugInfoToRequests = false
    }

    # The maximum length of the HTTP headers. The most common effect of this is a restriction in cookie length, including
    # number of cookies and size of cookie values.
    max-header-size = 8k

    # If a request contains a Content-Length header it will be checked against this maximum value.
    # If the value of a given Content-Length header exceeds this configured value, the request will not be processed
    # further but instead the error handler will be called with Http status code 413 "Entity too large".
    # If set to infinite or if no Content-Length header exists then no check will take place at all
    # and the request will continue to be processed.
    # Play uses the concept of a `BodyParser` to enforce this limit, so we set it to infinite.
    max-content-length = infinite
  }

  editor = ${?PLAY_EDITOR}

}


# Determines whether HTTP2 is enabled.
play.server.akka.http2 {
  enabled = false
  enabled = ${?http2.enabled}
  alwaysForInsecure = false  # @ApiMayChange
  alwaysForInsecure = ${?http2.alwaysForInsecure}
}